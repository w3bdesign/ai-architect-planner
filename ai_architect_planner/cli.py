"""Interactive console interface for AI Architect Planner."""

import typer
from rich.console import Console
from rich.panel import Panel
from rich.prompt import Prompt
from rich.theme import Theme
from typing import Literal, Optional, Dict
from pathlib import Path
from datetime import datetime

custom_theme = Theme({
    "info": "cyan",
    "warning": "yellow",
    "error": "red",
    "success": "green",
    "prompt": "yellow",
})

ProjectType = Literal["web", "mobile", "desktop", "api", "other"]
VALID_PROJECT_TYPES = ["web", "mobile", "desktop", "api", "other"]

console = Console(theme=custom_theme)
app = typer.Typer(help="AI Architect Planner - Your Enterprise Architecture Assistant")

def collect_project_details() -> Dict[str, str]:
    """Collect project details through interactive prompts."""
    console.print(
        Panel.fit(
            "[success]Welcome to AI Architect Planner[/success]\n\n"
            "Let's gather some information about your project.",
            title="AI Architect Planner",
            border_style="blue",
        )
    )

    # Collect basic project information
    project_name = Prompt.ask("[prompt]What is your project name?[/prompt]")
    
    # Enforce valid project type selection
    while True:
        project_type = Prompt.ask(
            "[prompt]What type of project is this?[/prompt]",
            choices=VALID_PROJECT_TYPES,
            show_choices=True
        )
        if project_type in VALID_PROJECT_TYPES:
            break
        console.print("[error]Please select a valid project type from the list.[/error]")
    
    project_description = Prompt.ask("[prompt]Please describe your project briefly[/prompt]")
    
    # Display collected information
    console.print("\n[info]Project Details Summary:[/info]")
    console.print(f"Project Name: [success]{project_name}[/success]")
    console.print(f"Project Type: [success]{project_type}[/success]")
    console.print(f"Description: [success]{project_description}[/success]")
    
    return {
        "name": project_name,
        "type": project_type,
        "description": project_description,
        "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }

def process_project_details(details: Dict[str, str]) -> None:
    """Process the collected project details and save to ARCHITECT.md."""
    content = f"""# {details['name']} - Architecture Document

## Project Overview

- **Project Name**: {details['name']}
- **Project Type**: {details['type']}
- **Description**: {details['description']}
- **Created**: {details['date']}

## Architecture Design

### System Architecture
- **Pattern**: _To be determined based on requirements_
- **Components**: _To be defined_
- **Data Flow**: _To be designed_

### Technology Stack
#### Frontend
- UI Framework: _To be selected_
- State Management: _To be determined_
- UI Components: _To be defined_

#### Backend
- Primary Language: _To be selected_
- Framework: _To be determined_
- Database: _To be selected_
- API Design: _To be defined_

#### Infrastructure
- Hosting: _To be determined_
- CI/CD: _To be defined_
- Monitoring: _To be selected_

### Security Architecture
- Authentication: _To be designed_
- Authorization: _To be implemented_
- Data Protection: _To be defined_
- Security Compliance: _To be addressed_

### Scalability Strategy
- Load Balancing: _To be designed_
- Caching Strategy: _To be defined_
- Database Scaling: _To be planned_
- Performance Optimization: _To be implemented_

### Development Guidelines
- Coding Standards: _To be defined_
- Testing Strategy: _To be designed_
- Documentation Requirements: _To be specified_
- Version Control Strategy: _To be implemented_

### Deployment Strategy
- Environment Setup: _To be defined_
- Deployment Process: _To be designed_
- Rollback Procedures: _To be implemented_
- Monitoring Setup: _To be configured_

## Next Steps
1. Define detailed requirements
2. Select technology stack
3. Design system architecture
4. Implement security measures
5. Set up development environment
6. Begin implementation

---
Generated by AI Architect Planner on {details['date']}
"""
    
    # Save to ARCHITECT.md
    output_path = Path("ARCHITECT.md")
    output_path.write_text(content, encoding='utf-8')
    console.print(f"\n[success]Architecture details saved to {output_path}[/success]")

def main() -> Optional[Dict[str, str]]:
    """Start the interactive AI Architect planning process."""
    try:
        project_details = collect_project_details()
        process_project_details(project_details)
        return project_details
        
    except KeyboardInterrupt:
        console.print("\n[warning]Process interrupted by user. Goodbye![/warning]")
        return None
    except Exception as e:
        console.print(f"\n[error]An error occurred: {str(e)}[/error]")
        return None

def run_cli() -> None:
    """Entry point for the CLI application."""
    main()

if __name__ == "__main__":  # pragma: no cover
    run_cli()
