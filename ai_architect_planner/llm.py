"""Mock LLM service with hardcoded responses."""

from typing import Dict, List

def analyze_project_requirements(details: Dict[str, str]) -> Dict[str, List[str]]:
    """Mock analysis of project requirements."""
    # Hardcoded response based on project type
    responses = {
        "web": {
            "architecture": [
                "Microservices architecture",
                "RESTful API design",
                "Single Page Application (SPA)"
            ],
            "components": [
                "Frontend client",
                "API Gateway",
                "Authentication service",
                "Database layer"
            ],
            "security": [
                "JWT authentication",
                "HTTPS encryption",
                "Input validation",
                "Rate limiting"
            ],
            "scalability": [
                "Horizontal scaling",
                "Caching layer",
                "Load balancing",
                "Database sharding"
            ]
        },
        "mobile": {
            "architecture": [
                "Client-server architecture",
                "Native app design",
                "Offline-first approach"
            ],
            "components": [
                "Mobile client",
                "Backend API",
                "Push notification service",
                "Data sync service"
            ],
            "security": [
                "Biometric authentication",
                "End-to-end encryption",
                "Secure storage",
                "Certificate pinning"
            ],
            "scalability": [
                "CDN integration",
                "Backend scaling",
                "Efficient data sync",
                "Background processing"
            ]
        }
    }
    
    # Default to web if project type not found
    return responses.get(details["type"], responses["web"])

def suggest_technology_stack(project_type: str) -> Dict[str, List[str]]:
    """Mock technology stack suggestions."""
    stacks = {
        "web": {
            "frontend": [
                "React",
                "TypeScript",
                "Redux",
                "Tailwind CSS"
            ],
            "backend": [
                "Node.js",
                "Express",
                "PostgreSQL",
                "Redis"
            ],
            "devops": [
                "Docker",
                "GitHub Actions",
                "AWS",
                "Prometheus"
            ]
        },
        "mobile": {
            "frontend": [
                "React Native",
                "TypeScript",
                "Redux",
                "Native Base"
            ],
            "backend": [
                "Node.js",
                "Express",
                "MongoDB",
                "Redis"
            ],
            "devops": [
                "Fastlane",
                "GitHub Actions",
                "AWS",
                "Firebase"
            ]
        }
    }
    
    return stacks.get(project_type, stacks["web"])

def generate_architecture_doc(details: Dict[str, str]) -> str:
    """Generate architecture document with hardcoded sections."""
    requirements = analyze_project_requirements(details)
    tech_stack = suggest_technology_stack(details["type"])
    
    return f"""# {details['name']} - Architecture Document

## Project Overview

- **Project Name**: {details['name']}
- **Project Type**: {details['type']}
- **Description**: {details['description']}

## Architecture Design

### System Architecture
- **Pattern**: {requirements['architecture'][0]}
- **Design**: {requirements['architecture'][1]}
- **Approach**: {requirements['architecture'][2]}

### Components
{chr(10).join(f"- {component}" for component in requirements['components'])}

### Technology Stack
#### Frontend
{chr(10).join(f"- {tech}" for tech in tech_stack['frontend'])}

#### Backend
{chr(10).join(f"- {tech}" for tech in tech_stack['backend'])}

#### DevOps
{chr(10).join(f"- {tech}" for tech in tech_stack['devops'])}

### Security Architecture
{chr(10).join(f"- {security}" for security in requirements['security'])}

### Scalability Strategy
{chr(10).join(f"- {scale}" for scale in requirements['scalability'])}

## Project Structure
```
{details['name'].lower().replace(" ", "-")}/
├── src/           # Source code
├── docs/          # Additional documentation
└── tests/         # Test files
```

## Next Steps
1. Set up development environment with selected technology stack
2. Implement core architecture components
3. Set up CI/CD pipeline
4. Implement security measures
5. Deploy initial version
6. Monitor and scale as needed

---
Generated by AI Architect Planner
"""
