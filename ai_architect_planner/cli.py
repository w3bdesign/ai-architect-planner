"""Interactive console interface for AI Architect Planner."""

from rich.console import Console
from rich.panel import Panel
from rich.prompt import Prompt
from pathlib import Path
from typing import Dict

console = Console()
VALID_PROJECT_TYPES = ["web", "mobile", "desktop", "api", "other"]

def collect_project_details() -> Dict[str, str]:
    """Collect project details through interactive prompts."""
    console.print(
        Panel.fit(
            "Welcome to AI Architect Planner\n\n"
            "Let's gather some information about your project.",
            title="AI Architect Planner",
        )
    )

    project_name = Prompt.ask("What is your project name?")
    
    while True:
        project_type = Prompt.ask(
            "What type of project is this?",
            choices=VALID_PROJECT_TYPES,
            show_choices=True
        )
        if project_type in VALID_PROJECT_TYPES:
            break
        console.print("Please select a valid project type from the list.")
    
    project_description = Prompt.ask("Please describe your project briefly")
    
    return {
        "name": project_name,
        "type": project_type,
        "description": project_description
    }

def process_project_details(details: Dict[str, str]) -> None:
    """Process the collected project details and create project structure."""
    # Create project directory structure
    project_dir = Path(details["name"].lower().replace(" ", "-"))
    project_dir.mkdir(exist_ok=True)
    (project_dir / "src").mkdir(exist_ok=True)
    (project_dir / "docs").mkdir(exist_ok=True)
    (project_dir / "tests").mkdir(exist_ok=True)
    
    content = f"""# {details['name']} - Architecture Document

## Project Overview

- **Project Name**: {details['name']}
- **Project Type**: {details['type']}
- **Description**: {details['description']}

## Architecture Design

### System Architecture
- **Pattern**: _To be determined based on requirements_
- **Components**: _To be defined_
- **Data Flow**: _To be designed_

### Technology Stack
#### Frontend
- UI Framework: _To be selected_
- State Management: _To be determined_
- UI Components: _To be defined_

#### Backend
- Primary Language: _To be selected_
- Framework: _To be determined_
- Database: _To be selected_
- API Design: _To be defined_

#### Infrastructure
- Hosting: _To be determined_
- CI/CD: _To be defined_
- Monitoring: _To be selected_

### Security Architecture
- Authentication: _To be designed_
- Authorization: _To be implemented_
- Data Protection: _To be defined_
- Security Compliance: _To be addressed_

### Scalability Strategy
- Load Balancing: _To be designed_
- Caching Strategy: _To be defined_
- Database Scaling: _To be planned_
- Performance Optimization: _To be implemented_

### Development Guidelines
- Coding Standards: _To be defined_
- Testing Strategy: _To be designed_
- Documentation Requirements: _To be specified_
- Version Control Strategy: _To be implemented_

### Deployment Strategy
- Environment Setup: _To be defined_
- Deployment Process: _To be designed_
- Rollback Procedures: _To be implemented_
- Monitoring Setup: _To be configured_

## Project Structure
```
{details['name'].lower().replace(" ", "-")}/
├── src/           # Source code
├── docs/          # Additional documentation
└── tests/         # Test files
```

## Next Steps
1. Define detailed requirements
2. Select technology stack
3. Design system architecture
4. Implement security measures
5. Set up development environment
6. Begin implementation

---
Generated by AI Architect Planner
"""
    
    # Save to ARCHITECT.md in the docs directory
    output_path = project_dir / "docs" / "ARCHITECT.md"
    output_path.write_text(content, encoding='utf-8')
    
    console.print(f"Project structure created at {project_dir}")
    console.print(f"Architecture details saved to {output_path}")

def main() -> Dict[str, str] | None:
    """Start the interactive AI Architect planning process."""
    try:
        details = collect_project_details()
        process_project_details(details)
        return details
    except KeyboardInterrupt:
        console.print("\nProcess interrupted by user. Goodbye!")
        return None
    except Exception as e:
        console.print(f"\nAn error occurred: {str(e)}")
        return None

if __name__ == "__main__":  # pragma: no cover
    main()
